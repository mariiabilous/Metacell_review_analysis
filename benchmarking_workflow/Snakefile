
gamma_values = [100]
datasets_list = [1, 2, 3, 4,
              5, 6, 7, 8,
              9 , 10, 11, 12, 13, 14]

rule all:
    input:
        'results/data_full/sc_data.h5ad',
         expand('results/data_subsets/sc_data/sc_data_{dataset}.h5ad', dataset=datasets_list),
         expand('results/data_subsets/mc_data/SuperCell/gamma{gamma}/{dataset}/mc_adata.h5ad', dataset=datasets_list, gamma=gamma_values),
         expand('results/data_subsets/mc_data/SEACells/gamma{gamma}/{dataset}/mc_adata.h5ad', dataset=datasets_list, gamma=gamma_values),
         expand('results/data_subsets/mc_data/MetaCell/gamma{gamma}/{dataset}/mc_adata.h5ad', dataset=datasets_list, gamma=gamma_values)

rule dataset_download:
    '''
    Download HLCA dataset.
    '''
    output:
        sc_data = 'results/data_full/sc_data.h5ad'
    container:
        "docker://agabriel/matk:dev"
    resources:
        mem_mb = config['dataset_download']['memory'],
        time = config['dataset_download']['time']
    params:
        download_link = config['data']['data_link']
    shell:
        """
        wget -O results/data_full/sc_data.h5ad {params.download_link}
        """

rule dataset_aggregating:
    '''
    Generate datasets with different sizes.
    '''
    input:
        anndata_file = 'results/data_full/sc_data.h5ad'
    output:
        sc_data = 'results/data_subsets/sc_data/sc_data_{dataset}.h5ad'
    container:
        "docker://agabriel/matk:dev"
    params:
        dataset = lambda wildcards: wildcards.dataset,
        output_folder = "results/data_subsets/sc_data/"
    resources:
        mem_mb = lambda wildcards, attempt: attempt * config['dataset_aggregating']['memory'],
        time = config['dataset_aggregating']['time']
    shell:
        """
        Rscript scripts/dataset_aggregating.r {input.anndata_file} {params.dataset} {params.output_folder}
        """

rule run_SuperCell:
    '''
    Build metacells for each data subset using SuperCell.
    '''
    input:
        sc_data = 'results/data_subsets/sc_data/sc_data_{dataset}.h5ad'
    output:
        mc_data = 'results/data_subsets/mc_data/SuperCell/gamma{gamma}/{dataset}/mc_adata.h5ad',
        SuperCell_benchmarks = 'benchmarks_time/gamma{gamma}_{dataset}_SuperCell.txt'
    container:
        "docker://agabriel/matk:dev"
    params:
        dataset = lambda wildcards: wildcards.dataset,
        gamma = lambda wildcards: wildcards.gamma,
        output_folder = 'results/data_subsets/mc_data/SuperCell/'
    resources:
        mem_mb = lambda wildcards, attempt: attempt * config['run_SuperCell']['memory'],
        time = config['run_SuperCell']['time']
    threads: config['run_MetaCell']['threads']
    benchmark:
        "benchmarks/gamma{gamma}_{dataset}_SuperCell.txt"
    shell:
        """
        mkdir -p benchmarks_time;
        /usr/bin/time -v -o benchmarks_time/gamma{params.gamma}_{params.dataset}_SuperCell.txt MATK -t SuperCell -i results/data_subsets/sc_data/sc_data_{params.dataset}.h5ad -o {params.output_folder}gamma{params.gamma}/{params.dataset}/ -n 50 -f 2000 -k 30 -g {params.gamma} -s adata -a sample -l {threads}
        """

rule run_SEACells:
    '''
    Build metacells for each data subset using SEACells.
    '''
    input:
        sc_data = 'results/data_subsets/sc_data/sc_data_{dataset}.h5ad'
    output:
        mc_data = 'results/data_subsets/mc_data/SEACells/gamma{gamma}/{dataset}/mc_adata.h5ad',
        SEACells_benchmarks = 'benchmarks_time/gamma{gamma}_{dataset}_SEACells.txt'
    container:
        "docker://agabriel/matk:dev"
    params:
        dataset = lambda wildcards: wildcards.dataset,
        gamma = lambda wildcards: wildcards.gamma,
        output_folder = 'results/data_subsets/mc_data/SEACells/'
    resources:
        mem_mb = lambda wildcards, attempt: attempt * config['run_SEACells']['memory'],
        time = config['run_SEACells']['time']
    threads: config['run_MetaCell']['threads']
    benchmark:
        "benchmarks/gamma{gamma}_{dataset}_SEACells.txt"
    shell:
        """
        mkdir -p benchmarks_time;
        /usr/bin/time -v -o benchmarks_time/gamma{params.gamma}_{params.dataset}_SEACells.txt MATK -t SEACells -i results/data_subsets/sc_data/sc_data_{params.dataset}.h5ad -o {params.output_folder}gamma{params.gamma}/{params.dataset}/ -n 50 -f 2000 -k 30 -g {params.gamma} -s adata -a sample -l {threads}
        """

rule run_MetaCell:
    '''
    Build metacells for each data subset using MetaCell.
    '''
    input:
        sc_data = 'results/data_subsets/sc_data/sc_data_{dataset}.h5ad'
    output:
        mc_data = 'results/data_subsets/mc_data/MetaCell/gamma{gamma}/{dataset}/mc_adata.h5ad',
        MetaCell_benchmarks = 'benchmarks_time/gamma{gamma}_{dataset}_MetaCell.txt'
    container:
        "docker://agabriel/matk:dev"
    params:
        dataset = lambda wildcards: wildcards.dataset,
        gamma = lambda wildcards: wildcards.gamma,
        output_folder = 'results/data_subsets/mc_data/MetaCell/'
    resources:
        mem_mb = lambda wildcards, attempt: attempt * config['run_MetaCell']['memory'],
        time = config['run_MetaCell']['time']
    threads: config['run_MetaCell']['threads']
    benchmark:
        "benchmarks/gamma{gamma}_{dataset}_MetaCell.txt"
    shell:
        """
        mkdir -p benchmarks_time;
        /usr/bin/time -v -o benchmarks_time/gamma{params.gamma}_{params.dataset}_MetaCell.txt MATK -t MetaCell -i results/data_subsets/sc_data/sc_data_{params.dataset}.h5ad -o {params.output_folder}gamma{params.gamma}/{params.dataset}/ -n 50 -f 2000 -k 30 -g {params.gamma} -s adata -a sample -l {threads}
        """

# snakemake --snakefile Snakefile --profile configs/slurm/ --configfile configs/config.yaml
